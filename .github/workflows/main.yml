name: Android Super Partition Repack

on:
  workflow_dispatch:
    inputs:
      device_model:
        description: 'Device Model (e.g., SM-G998B)'
        required: true
        type: string
      device_csc:
        description: 'Device Region/CSC (e.g., EUX)'
        required: true
        type: string
      custom_system_url:
        description: 'Custom ROM download URL (.img, .img.xz, .img.gz, .zip supported)'
        required: true
        type: string
      empty_product:
        description: 'Use empty product.img (-e flag)'
        required: false
        type: boolean
        default: false
      empty_system_ext:
        description: 'Use empty system_ext.img (-x flag)'
        required: false
        type: boolean
        default: false
      silent_mode:
        description: 'Silent mode (-s flag)'
        required: false
        type: boolean
        default: true
      writable:
        description: 'Make partitions writable (-w flag)'
        required: false
        type: boolean
        default: false
      purge_all:
        description: 'Purge repacksuper directory (-p flag)'
        required: false
        type: boolean
        default: false

jobs:
  repack-super:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python environment
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Dependencies and Samloader
      run: |
        echo "==> Installing base OS dependencies..."
        sudo apt-get update
        sudo apt-get install -y \
#          android-tools-fsutils \
          android-sdk-libsparse-utils \
          tar \
          xz-utils \
          liblz4-tool \
          unzip \
          gzip \
          file \
          wget \
          curl \
          git
        
        echo "==> Creating Python virtual environment..."
        python -m venv venv
        
        echo "==> Installing samloader from git..."
        venv/bin/python -m pip install git+https://github.com/samloader/samloader.git
        
        if [ ! -f "venv/bin/samloader" ]; then
          echo "✗ CRITICAL ERROR: samloader failed to install."
          exit 1
        fi
        echo "✓ samloader installed successfully."

    - name: Verify repacksuper.sh exists
      run: |
        if [ ! -f "./repacksuper.sh" ]; then echo "✗ Error: repacksuper.sh not found" && exit 1; fi
        chmod +x ./repacksuper.sh

    - name: Create working directory
      run: mkdir -p work

    - name: Download and Extract Stock Firmware
      run: |
        cd work
        # STEP 1: Check for the latest firmware version first.
        echo "==> Checking for the latest firmware version..."
        LATEST_FW_VERSION=$(../venv/bin/samloader checkupdate -m "${{ github.event.inputs.device_model }}" -r "${{ github.event.inputs.device_csc }}")
        
        if [ -z "$LATEST_FW_VERSION" ]; then
          echo "✗ CRITICAL ERROR: Could not fetch the latest firmware version for ${{ github.event.inputs.device_model }}/${{ github.event.inputs.device_csc }}."
          exit 1
        fi
        echo "✓ Latest firmware version found: $LATEST_FW_VERSION"
        
        # STEP 2: Use the fetched version string with the required -v flag to download.
        echo "==> Downloading firmware version $LATEST_FW_VERSION..."
        ../venv/bin/samloader download -m "${{ github.event.inputs.device_model }}" -r "${{ github.event.inputs.device_csc }}" -v "$LATEST_FW_VERSION" -O .
        
        FIRMWARE_ZIP=$(ls *.zip | head -n 1)
        if [ -z "$FIRMWARE_ZIP" ]; then echo "✗ Error: Firmware ZIP not found after download." && exit 1; fi
        echo "✓ Firmware downloaded: $FIRMWARE_ZIP"
        
        echo "==> Unzipping firmware package..."
        unzip -o "$FIRMWARE_ZIP"
        
        AP_FILE=$(find . -name "AP_*.tar.md5" | head -n 1)
        if [ -z "$AP_FILE" ]; then echo "✗ Error: AP file not found in firmware." && ls -lR && exit 1; fi
        echo "✓ Found AP file: $AP_FILE"
        
        echo "==> Extracting super.img from AP file..."
        tar -xvf "$AP_FILE" super.img.sparse.lz4
        if [ ! -f "super.img.sparse.lz4" ]; then echo "✗ Error: Could not extract super.img.sparse.lz4." && exit 1; fi
        
        echo "==> Decompressing and preparing stock_super.img..."
        lz4 -d super.img.sparse.lz4 stock_super_sparse.img
        simg2img stock_super_sparse.img stock_super.img
        
        if [ ! -f "stock_super.img" ]; then echo "✗ Error: Failed to create raw stock_super.img" && exit 1; fi
        echo "✓ stock_super.img prepared successfully!"

    - name: Download and Prepare Custom system.img
      run: |
        cd work
        echo "==> Downloading custom ROM package from: ${{ github.event.inputs.custom_system_url }}"
        wget -O custom_rom_package "${{ github.event.inputs.custom_system_url }}"
        if [ ! -s "custom_rom_package" ]; then echo "✗ Error: Failed to download custom ROM." && exit 1; fi
        
        FILE_TYPE=$(file -b custom_rom_package)
        echo "File type detected: $FILE_TYPE"
        case "$FILE_TYPE" in
          *"XZ compressed data"*)      mv custom_rom_package custom_system.img.xz && unxz custom_system.img.xz ;;
          *"gzip compressed data"*)    mv custom_rom_package custom_system.img.gz && gunzip custom_system.img.gz ;;
          *"Zip archive data"*)
            unzip -o custom_rom_package
            SYSTEM_IMG_FILE=$(find . -maxdepth 1 -name "system.img" -o -name "system.raw.img" | head -n 1)
            if [ -z "$SYSTEM_IMG_FILE" ]; then echo "✗ Error: system.img not found in ZIP." && ls -lR && exit 1; fi
            mv "$SYSTEM_IMG_FILE" custom_system.img ;;
          *"Android sparse image"*)    mv custom_rom_package c_sparse.img && simg2img c_sparse.img custom_system.img ;;
          *"ext4 filesystem data"*)    mv custom_rom_package custom_system.img ;;
          *)                            echo "✗ Error: Unsupported file type: $FILE_TYPE" && exit 1 ;;
        esac
        if [ ! -f "custom_system.img" ]; then echo "✗ Error: custom_system.img not created." && exit 1; fi
        echo "✓ Custom system.img prepared successfully!"

    - name: Prepare repacksuper.sh flags
      id: prepare_flags
      run: |
        FLAGS=""
        if [ "${{ github.event.inputs.empty_product }}" == "true" ]; then FLAGS="$FLAGS -e"; fi
        if [ "${{ github.event.inputs.empty_system_ext }}" == "true" ]; then FLAGS="$FLAGS -x"; fi
        if [ "${{ github.event.inputs.silent_mode }}" == "true" ]; then FLAGS="$FLAGS -s"; fi
        if [ "${{ github.event.inputs.writable }}" == "true" ]; then FLAGS="$FLAGS -w"; fi
        if [ "${{ github.event.inputs.purge_all }}" == "true" ]; then FLAGS="$FLAGS -p"; fi
        echo "flags=$FLAGS" >> $GITHUB_OUTPUT

    - name: Run repacksuper.sh
      run: |
        cd work
        echo "==> Running repacksuper.sh with flags: ${{ steps.prepare_flags.outputs.flags }}"
        ../repacksuper.sh ${{ steps.prepare_flags.outputs.flags }} -r "$(pwd)" stock_super.img custom_system.img repacked_super.img

    - name: Verify output and Create Tarball
      run: |
        cd work
        if [ ! -f "repacked_super.img" ]; then echo "✗ Error: repacked_super.img not found." && ls -la && exit 1; fi
        echo "✓ Repacked super.img created successfully."
        echo "==> Creating tar archive for Odin..."
        tar -cvf repacked_super.tar repacked_super.img
        echo "✓ Tar archive created."

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: repacked-super-${{ github.event.inputs.device_model }}-${{ github.event.inputs.device_csc }}
        path: |
          work/repacked_super.img
          work/repacked_super.tar
        retention-days: 7

    - name: Upload Logs on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failure-logs-${{ github.event.inputs.device_model }}
        path: work/
        retention-days: 1

    - name: Display Completion Message
      run: |
        echo "======================================================="
        echo "  Android Super Partition Repack Complete"
        echo "======================================================="
        echo "✓ Stock firmware processed for ${{ github.event.inputs.device_model }}"
        echo "✓ Custom ROM integrated"
        echo "✓ New super.img created and packaged"
        echo ""
        echo "Download the 'repacked-super-...' artifact below."
        echo "======================================================="
