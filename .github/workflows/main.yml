name: Android Super Partition Repack (Robust & Cached)

on:
  workflow_dispatch:
    inputs:
      stock_firmware_url:
        description: 'URL to the stock firmware (Direct, MEGA, GitHub Release recommended)'
        required: true
        type: string
      custom_system_url:
        description: 'Custom ROM download URL (.img, .img.xz, .img.gz, .zip supported)'
        required: true
        type: string
      # ... (rest of your inputs are fine) ...
      empty_product:
        description: 'Use empty product.img (-e flag)'
        required: false
        type: boolean
        default: false
      empty_system_ext:
        description: 'Use empty system_ext.img (-x flag)'
        required: false
        type: boolean
        default: false
      silent_mode:
        description: 'Silent mode (-s flag)'
        required: false
        type: boolean
        default: true
      writable:
        description: 'Make partitions writable (-w flag)'
        required: false
        type: boolean
        default: false
      purge_all:
        description: 'Purge repacksuper directory after use (-p flag)'
        required: false
        type: boolean
        default: true

jobs:
  repack-super:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y android-sdk-libsparse-utils tar xz-utils liblz4-tool unzip gzip file wget curl megatools

    - name: Verify and Prepare Script
      run: |
        if [ ! -f "./repacksuper.sh" ]; then echo "✗ Error: repacksuper.sh not found" && exit 1; fi
        chmod +x ./repacksuper.sh

    - name: Create working directory
      run: mkdir -p work

    # --- CACHING AND DOWNLOAD LOGIC ---
    - name: Cache Stock Firmware
      id: cache-stock
      uses: actions/cache@v4
      with:
        path: work/stock_firmware.zip
        key: ${{ runner.os }}-stock-${{ hashFiles(github.event.inputs.stock_firmware_url) }}

    - name: Download and Extract Stock Firmware
      run: |
        cd work
        FIRMWARE_URL="${{ github.event.inputs.stock_firmware_url }}"
        
        # Download only if the file wasn't restored from cache
        if [ "${{ steps.cache-stock.outputs.cache-hit }}" != 'true' ]; then
          echo "==> No cache hit. Downloading stock firmware..."
          # Download logic with retries
          if [[ $FIRMWARE_URL == *"mega.nz"* ]]; then
            megadl "$FIRMWARE_URL" -o stock_firmware.zip
          else
            wget --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" \
                 --content-disposition -O stock_firmware.zip \
                 --tries=5 --wait=10 \
                 "$FIRMWARE_URL"
          fi
        else
            echo "==> Stock firmware cache restored successfully."
        fi
        
        if [ ! -f "stock_firmware.zip" ]; then echo "✗ CRITICAL ERROR: Failed to download/find stock firmware." && exit 1; fi
        
        echo "✓ Stock firmware ready: stock_firmware.zip"
        
        # Unzip and clean the archive immediately after use
        unzip -o "stock_firmware.zip"
        # Don't delete the zip yet, the cache needs it. It will be cleaned up by the runner.
        
        AP_FILE=$(find . -name "AP_*.tar.md5" | head -n 1)
        if [ -z "$AP_FILE" ]; then echo "✗ Error: AP file not found." && ls -lR && exit 1; fi
        
        tar -xvf "$AP_FILE" super.img.lz4
        rm "$AP_FILE" # Clean up the huge AP file
        rm -f BL_* CP_* HOME_CSC_* CSC_* # Clean up other firmware parts
        
        lz4 -d super.img.lz4 stock_super_sparse.img
        rm super.img.lz4
        
        if [ ! -f "stock_super_sparse.img" ]; then echo "✗ Error: Failed to create sparse stock_super.img." && exit 1; fi
        echo "✓ stock_super_sparse.img prepared successfully!"

    # ... The rest of your workflow from the previous correct version ...
    # (Download Custom, Prepare Flags, Run Script, Tarball, Upload Artifacts)
    # The following steps are unchanged and correct.

    - name: Download and Prepare Custom system.img
      run: |
        # This step is correct as it was
        cd work
        wget -O custom_rom_package "${{ github.event.inputs.custom_system_url }}"
        if [ ! -s "custom_rom_package" ]; then echo "✗ Error: Failed to download custom ROM." && exit 1; fi
        
        FILE_TYPE=$(file -b custom_rom_package)
        echo "File type detected: $FILE_TYPE"
        case "$FILE_TYPE" in
          *"XZ compressed data"*)      mv custom_rom_package custom_system.img.xz && unxz custom_system.img.xz ;;
          *"gzip compressed data"*)    mv custom_rom_package custom_system.img.gz && gunzip custom_system.img.gz ;;
          *"Zip archive data"*)
            unzip -o custom_rom_package system.img || unzip -o custom_rom_package system.raw.img
            rm custom_rom_package
            SYSTEM_IMG_FILE=$(find . -maxdepth 1 -name "system.img" -o -name "system.raw.img" | head -n 1)
            if [ -z "$SYSTEM_IMG_FILE" ]; then echo "✗ Error: system.img not found in ZIP." && ls -lR && exit 1; fi
            mv "$SYSTEM_IMG_FILE" custom_system.img ;;
          *"Android sparse image"*)    mv custom_rom_package c_sparse.img && simg2img c_sparse.img custom_system.img && rm c_sparse.img ;;
          *"ext4 filesystem data"*)    mv custom_rom_package custom_system.img ;;
          *)                            rm custom_rom_package; echo "✗ Error: Unsupported file type: $FILE_TYPE" && exit 1 ;;
        esac
        
        rm -f custom_rom_package
        if [ ! -f "custom_system.img" ]; then echo "✗ Error: custom_system.img not created." && exit 1; fi
        echo "✓ Custom system.img prepared successfully! Downloaded package cleaned up."

    - name: Prepare repacksuper.sh flags
      id: prepare_flags
      run: |
        FLAGS="-r $(pwd)/work"
        if [ "${{ github.event.inputs.silent_mode }}" == "true" ]; then FLAGS="$FLAGS -s"; fi
        if [ "${{ github.event.inputs.purge_all }}" == "true" ]; then FLAGS="$FLAGS -p"; fi
        if [ "${{ github.event.inputs.empty_product }}" == "true" ]; then FLAGS="$FLAGS -e"; fi
        if [ "${{ github.event.inputs.empty_system_ext }}" == "true" ]; then FLAGS="$FLAGS -x"; fi
        if [ "${{ github.event.inputs.writable }}" == "true" ]; then FLAGS="$FLAGS -w"; fi
        echo "flags=$FLAGS" >> $GITHUB_OUTPUT

    - name: Run repacksuper.sh
      run: |
        echo "==> Running repacksuper.sh with flags: ${{ steps.prepare_flags.outputs.flags }}"
        ./repacksuper.sh ${{ steps.prepare_flags.outputs.flags }} work/stock_super_sparse.img work/custom_system.img work/repacked_super.img
        
        echo "==> Repacking finished. Cleaning up original images..."
        rm -f work/stock_super_sparse.img work/custom_system.img

    - name: Verify output and Create Tarball
      run: |
        cd work
        if [ ! -f "repacked_super.img" ]; then echo "✗ Error: repacked_super.img not found." && ls -la && exit 1; fi
        tar -cvf repacked_super.tar repacked_super.img

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: repacked-super-img
        path: |
          work/repacked_super.img
          work/repacked_super.tar
        retention-days: 7

    - name: Final Cleanup and Space Check
      if: always()
      run: |
        echo "==> Final disk space usage in working directory:"
        df -h work/
        ls -lh work/

    - name: Upload Logs on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failure-logs
        path: work/
        retention-days: 1
